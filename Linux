Situational Awareness
===================================================================
identify adversaries, estimate impact of attacks, evaluate risks, understand situations and make sound decisions on how to protect valued assets swiftly and accurately
Main Concerns:
  Logged in Privileged Users
  Malware
  Logging
  Security Products

System Analysis:
  Date and Time
  CPU/Memory Usage
    dmidecode [options]          #Check statistics on the cpu
    free [options]  -g for gigs, -m for megs      #Check CPU/memory usage
    top [-b] [-nCOUNT] [-dSECONDS] [-m]           #Check CPU/memory usage, but takes over terminal
  Disk Usage
    fdisk      Partition table manipulator for Linux    (-l for list)
    du         Estimate file space usage
    df         Display free disk space    (-h human readable)
    quota      Display disk usage and limits
    mount      Mount a file system
    lspci      List all PCI devices
    lsblk      List block devices
    lsusb      List all USB devices
  Distinguish Different Architecture
    uname -a
    lscpu
    Binaries created for one architecture will not run on another architecture. Exception - x86 binaries will often run on 64      bit systems that have x86 support
  Machine Identification
    MAC addresses may not always match up
    IPv4
      ip a, r, n, t
    IPv6
    Hostname
      uname -a,-r,-v,-m,-i,-o    #use -a
    Domain Name
  cat /etc/*rel*
  Processes
    ps -elfH      # current running processes
  Services
    service --status-all or systemctl status --no-pager
    ps -elf | grep <PID>
  Open Ports/Connections
    netstat -tunap        #-p needs sudo
    ss -antup
    Closed_wait    -other side connection closed
    time_wait      -our connect closed
  Files
    ls            List information about file(s)      -latr /, -R for recursive
    dir           Briefly list directory contents
    cd            Change Directory
    file          Determine file type
    cat           Concatenate and print (display) the content of files
    tail          Output the last part of file      -<#> of lines wanted
    head          Output the first part of file(s)  -<#> of lines wanted
    more          Display output one screen at a time
    less          Display output one screen at a time    # / to search
    strings       Output the strings of printable characters in a file
    grep          Search file(s) for lines that match a given pattern
    *.swp file means file is currently open and being edited*
  Jobs
    /etc/crontab    where cron jobs are stored
    crontab -u <user> -l
  Time Stamps
    Modify    last time the contents of file were changed; timestamp shown when running ls -latr
    Access    last time data of file was accessed or read; can be from commands or scripts
    Change    last time the metadata of a file was changed
    Touch time format          [[CC]YY]MMDDhhmm[.SS]
    touch -m                                   updates the modify time only
    touch -t                                   updates the access and modify time.
    touch (by itself)                          updates everything
    touch -a                                   updates access only
    touch -r <file to match to> <file>         use this file’s times
    stat <file>                show file status
    stat -f <file>             show file system status
Residual Risk (Risk out of our control) and Exit Checks: 
  User Activity
  Logging
  Changes to be aware of:
    Creating files
    Modifying system configurations
    Firewall rules
    Stopping or starting services
  Open Source Research:
    Different OSs may run different versions of common commands, or use different commands entirely
    Do not troubleshoot syntax on target; can use VTA tunnel/practice network to troubleshoot
    man.openbsd.org
    manpages.ubuntu.com
    stackoverflow.com

Privileged Users
===========================================================================================================
privileged user is a user with the access and ability to detect on net activities and take action to hinder, stop, or prevent it
tty on locally; pts remotely
Commands:
  w : who is logged in, for how long, and how?
  who -Ha : similar to w
  netstat -auntp OR ss -auntp : are there any connections associated with their session?
  ps -elf : are there any networked processes associated with their session/PIDs?
  last : What does their access pattern of life look like?
Places to look to identify Privileges:
  cat /etc/sudoers
  cat /etc/group
  groups <username>
Determine Actions/What they are doing:
  ps -elfH
  netstat -auntp
  User’s ~/.bash_history
  User’s ~/.lesshst
  Review logs

Risk Assessment:
  Target - Where did you see this user?
  User - What is their username?
  Access time - How long have they been on?
  Access method - Did they access locally? Remotely? Provide all relevant details
  Privileges - What are they capable of doing?
  Activity - What are they currently doing?
  Recommendation - Do we need to be concerned? Do we need to adjust our plans?


Malware
===================================================================================================
software on the box that is unknown to the system admin; weakens overall security posture of the system, can in inhibit our ability to coduct mission
Malware is NOT:
  Software-based Security Product (Kaspersky, Norton, Spybot S&D)
  Standard OS logging
  Logging mechanisms without malicious/nefarious intent
Malware IS:
  Something that achieves malicious/nefarious intent
  Anything that compromises your mission which is not a Software-based Security Product or logging

Malware Indictators:
  Showing up in the process list    ps -elf
  Network connections               netstat -tunap OR ss -tunap
  Scheduled Jobs                    crontabs
  Weird files
A lot of malware identification heavily relies on your ability to determine what is “normal” for the device. Just because something is new to you does not necessarily mean it is malware, in this class you can google everything if you don’t know it!

Common Locations:
  Malware can exist, but is not limited to, at least one of these common directories:
    /
    /root
    /tmp
    /home/*useraccount*
    /etc/crontab

Identify all related files to the malware!
  Installation files, child processes and their files, relevant directory files, and literally anything that could be related   to the malware.
  Reading scripts, finding human readable text, and following PID/PPID is critical to identifying these files.
  use find to search in 24 hr window of malware found; 12 hrs before and 12 hrs after
  timestomp 2 files
  
Persistence:
  Common persistence mechanisms:
    Scripts (most of these)
    Jobs
    Startup locations
    Remote triggers

Malware in Memory:
  sudo ls -latr /proc
  cat /proc/<FILE>
  cp malware out of proc into /tmp


Hash the main binary files and drop them into the appropriate malware databases and see what you get
https://www.virustotal.com/gui/home/search       #dont rely on not the end-all-be-all, not the best for Linux
Get hash of malware for report    md5sum <MALWARE>
Malware Prosecution Commands:
  lsof
  lsmod
  find / -mmin
  (for user in $(cut -f1 -d: /etc/passwd); do echo $user; crontab -u $user -l; done)
  contents of /proc
  insmod or modprobe

Malware Reportable Items:
  Process name/options, PID, Parent ID, user, and hash
  File type of malware binary and supporting files
  Associated logs generated by malware
  Location and lines of any persistence mechanisms
  Full path of malware files or support files
  Network connections opened/established by malware
  Identifiable text
  Modules loaded by malware
  Brief description of malware purpose/actions and capabilities
  Recommendation - Do we need to be concerned or adjust our plans?











    
